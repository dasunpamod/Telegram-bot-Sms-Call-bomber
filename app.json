const Telegraf = require('telegraf')
const session = require('telegraf/session')
const Stage = require('telegraf/stage')
const all_scenes = require('./scripts/scenes.js')
const my_functions = require('./scripts/funcs.js')
const keyboard_text = require('./scripts/keyboards_text_acl.js')

const greater_scene = all_scenes.greater_scene()
const single_scene = all_scenes.single_scene()
const scope_scene = all_scenes.scope_scene()
const test_flood = all_scenes.test_flood_scene()

//–í–º–µ—Å—Ç–æ your telegram-bot token –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à telegram-token –≤ –∫–∞–≤—ã—á–∫–∞—Ö
const bot = new Telegraf(your telegram-bot token)
const stage = new Stage([single_scene, scope_scene, greater_scene, test_flood])

bot.use(session())
bot.use(stage.middleware())

bot.start((ctx) => {
	if (keyboard_text.access_list.includes(ctx.from.id)){
		my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard);
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})

bot.action('single', async (ctx) => {
	ctx.answerCbQuery()
	if (keyboard_text.access_list.includes(ctx.from.id)){
		my_functions.my_inline_keyboard(ctx, keyboard_text.single_text, keyboard_text.second_keyboard);
		ctx.scene.enter('single_scene')
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})

bot.action('scope', async (ctx) => {
	ctx.answerCbQuery()
	if (keyboard_text.access_list.includes(ctx.from.id)){
		my_functions.my_inline_keyboard(ctx, keyboard_text.scope_text, keyboard_text.second_keyboard);
		ctx.scene.enter('scope_scene')
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})

bot.action('Main_menu', async (ctx) => {
	ctx.answerCbQuery()
	if (keyboard_text.access_list.includes(ctx.from.id)){
		my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard)
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})

bot.action('cancel', async (ctx) => {
	ctx.answerCbQuery()
	if (keyboard_text.access_list.includes(ctx.from.id)){
		my_functions.my_inline_keyboard(ctx, '–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ *–ó–∞–ø—É—Å—Ç–∏—Ç—å*, flood –∑–∞–ø—É—â–µ–Ω. Flood –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã–∑–æ–≤–∏—Ç–µ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*' , keyboard_text.second_keyboard);
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})

bot.action('run', async (ctx) => {
	ctx.answerCbQuery()
	if (keyboard_text.access_list.includes(ctx.from.id)){
		my_functions.my_inline_keyboard(ctx, '–î–ª—è –Ω–∞—á–∞–ª–æ, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ *–ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é* üëá', keyboard_text.second_keyboard)
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})
//–í–º–µ—Å—Ç–æ 'Admin Telegram-id' –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à telegram-id
bot.command("tima_best", (ctx) => {
	if (ctx.from.id === 'Admin Telegram-id') {
		ctx.reply('Hello Creator, which id wants to take access?')
		ctx.scene.enter('greater_scene')
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})
//–í–º–µ—Å—Ç–æ 'Admin Telegram-id' –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à telegram-id
bot.command("tima_test", (ctx) => {
	if (ctx.from.id === 'Admin Telegram-id') { 
		ctx.reply('Hello Creator')
		ctx.scene.enter('test_flood')
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})

bot.command('help', (ctx) => {
	if (keyboard_text.access_list.includes(ctx.from.id)){
		my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard);
	} else {
		ctx.replyWithMarkdown("Ooops you don't have permission, your telegram id: `" + ctx.from.id + "`")
	}
})

bot.on('message', (ctx) => {
	if (keyboard_text.access_list.includes(ctx.from.id)) {
		if (ctx.message.text === '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
			my_functions.my_inline_keyboard(ctx, keyboard_text.main_text, keyboard_text.first_keyboard);
		} else {
			my_functions.my_inline_keyboard(ctx, '–î–ª—è –Ω–∞—á–∞–ª–æ, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ *–ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é* üëá', keyboard_text.second_keyboard)
		}
	} else {
		return bot
	}	
})

bot.launch().then(console.log("Bot is running ...."))
